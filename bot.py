import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import requests
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = '7421252065:AAGFWO70HPOSPkS8BU-CczsM5Pa5tBM3JO8'
BASE_URL = "https://desks-duels-backend.onrender.com/auth"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# Scheduler initialization
scheduler = AsyncIOScheduler()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä)
def get_all_users():
    # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä —Å–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ user_id
    response = requests.get("https://desks-duels-backend.onrender.com/users")  # Update to match your API endpoint
    if response.status_code == 200:
        return response.json()  # Assuming API returns list of user IDs
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return []

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def notify_user(telegram_id):
    webAppKeyboard = WebAppInfo(url="https://desks-duels.netlify.app/")
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webAppKeyboard)
    )
    
    try:
        await bot.send_message(
            telegram_id,
            "–ì–æ—Ç–æ–≤—å—Å—è –∫ –±–∏—Ç–≤–µ, –æ–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_notifications():
    users = [984383301]
    for user in users:
        await notify_user(user)  # Assuming "telegramId" is the key for user IDs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —É—Ä–æ–∫–∞–º–∏
def schedule_notifications():
    # Schedule notifications 5 minutes before the end of each lesson
    lesson_times = [
        ("07:35", send_notifications),  # Before 1st lesson ends at 8:40
        ("09:25", send_notifications),  # Before 2nd lesson ends at 9:30
        ("10:15", send_notifications),  # Before 3rd lesson ends at 10:20
        ("11:15", send_notifications),  # Before 4th lesson ends at 11:20
        ("12:15", send_notifications),  # Before 5th lesson ends at 12:20
        ("13:05", send_notifications),  # Before 6th lesson ends at 13:10
        ("13:55", send_notifications),  # Before 7th lesson ends at 14:00
    ]

    for time_str, job in lesson_times:
        hour, minute = map(int, time_str.split(":"))
        scheduler.add_job(job, "cron", hour=hour, minute=minute, day_of_week="mon-fri")

@dp.message_handler(commands=['restart'])
async def delete_user(message: types.Message):
    data = {"telegramId": message.from_user.id}
    try:
        response = requests.delete(f'{BASE_URL}/delete', json=data)
        response.raise_for_status()
        await message.reply('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!\n<b>–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ /start</b>', parse_mode='html')
    except requests.exceptions.RequestException as e:
        print(f"Error deleting user: {e}")
        await message.reply(f'–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.\n<b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}</b>', parse_mode='html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    print(message.from_user.id)
    user_data = {
        "telegramId": str(message.from_user.id),
        "username": message.from_user.username,
        "firstName": message.from_user.first_name
    }
    webAppKeyboard = WebAppInfo(url="https://desks-duels.netlify.app/")
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webAppKeyboard)
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        response = requests.post(f'{BASE_URL}/register', json=user_data)
        print(response.json())
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ–∫–∞ —á—Ç–æ localhost)
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    welcome_text = (
    f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üéâ <b>Desks Duels</b> üéâ \n–≠—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –∏–≥—Ä–∞, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –∑–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ –≤ –∫–ª–∞—Å—Å–µ\n"
    "\nüëá <b>–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É</b> üëá"
)

    await message.reply(welcome_text, reply_markup=keyboard, parse_mode='html')
# scheduler.add_job(send_notifications, "interval", minutes=1)  # Sends notifications every minute for testing

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
    schedule_notifications()
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
