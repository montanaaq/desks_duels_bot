import asyncio
import logging
import os
from contextlib import asynccontextmanager

import aiohttp
import requests
import socketio
import uvicorn
from aiogram import Bot, Dispatcher, types
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           WebAppInfo)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

sio = socketio.Client()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# ==========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==========================

API_TOKEN = os.getenv('API_TOKEN')
BASE_URL = os.getenv('BASE_URL')
PORT = int(os.getenv('PORT', 8000))
WEBHOOK_PATH = "/webhook"

def connect_to_socket():
    try:
        sio.connect(BASE_URL, 
            headers={
                'Origin': BASE_URL
            },
            transports=['polling'],
            wait_timeout=10
        )
        logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–æ–∫–µ—Ç–∞–º')
        
        # Emit join event for all connected users
        try:
            response = requests.get(f"{BASE_URL}/users")
            if response.status_code == 200:
                users = response.json()
                for user in users:
                    telegram_id = str(user.get('telegramId'))
                    if telegram_id:
                        sio.emit('join', telegram_id)
                        logger.info(f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id}')
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')
            
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ–∫–µ—Ç–∞–º: {e}')

# –î–æ–±–∞–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CURRENT_USER_ID = None

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notifications_state = {}  # Dictionary to store notification state per user

# Remove async from the socket event handler
@sio.event
def duelRequest(data):
    try:
        # Debug logging
        logger.info('==================== –ù–û–í–´–ô –í–´–ó–û–í –ù–ê –î–£–≠–õ–¨ ====================')
        logger.info(f'–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}')
        
        telegram_id = str(data.get('challengedId'))
        seat_id = data.get('seatId')
        challenger_name = data.get('challengerName')
        
        logger.info(f'ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {telegram_id}')
        logger.info(f'ID –º–µ—Å—Ç–∞: {seat_id}')
        logger.info(f'–ò–º—è –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ: {challenger_name}')

        # Create and run a new event loop for this thread
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(send_duel_notification(telegram_id, seat_id, challenger_name))
        finally:
            loop.close()
            
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ duelRequestSent: {e}')

# Separate async function for sending notifications
async def send_duel_notification(telegram_id, seat_id, challenger_name):
    if not notifications_state.get(telegram_id, True):  # Default to enabled if not set
        logger.info(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}')
        return
        
    try:
        webAppKeyboard = WebAppInfo(url="https://desks-duels.netlify.app/")
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webAppKeyboard)
        )
        
        await bot.send_message(
            chat_id=telegram_id,
            text=f"üéØ –í–∞—Å –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å!\n"
                 f"<b>{challenger_name}</b> –±—Ä–æ—Å–∏–ª –≤–∞–º –≤—ã–∑–æ–≤ –∑–∞ –º–µ—Å—Ç–æ ‚Ññ{seat_id}!\n"
                 f"–£ –≤–∞—Å –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞ —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤, –∏–Ω–∞—á–µ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ ‚öîÔ∏è",
            reply_markup=keyboard,
            parse_mode='html'
        )
        logger.info('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

@sio.event
def duelDeclined(data):
    try:
        logger.info('==================== –î–£–≠–õ–¨ –û–¢–ö–õ–û–ù–ï–ù–ê ====================')
        logger.info(f'–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}')
        
        duel = data.get('duel', {})
        telegram_id = str(duel.get('player2'))  # ID —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ç–∫–ª–æ–Ω–∏–ª
        seat_id = duel.get('seatId')
        challenger_name = data.get('challengerName', '–°–æ–ø–µ—Ä–Ω–∏–∫')
        
        logger.info(f'ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {telegram_id}')
        logger.info(f'ID –º–µ—Å—Ç–∞: {seat_id}')
        logger.info(f'–ò–º—è –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ: {challenger_name}')
        
        # Create and run a new event loop for this thread
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(send_decline_notification(telegram_id, seat_id, challenger_name))
        finally:
            loop.close()
            
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ duelDeclined: {e}')

async def send_decline_notification(telegram_id, seat_id, challenger_name):
    if not notifications_state.get(telegram_id, True):  # Default to enabled if not set
        logger.info(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}')
        return
        
    try:
        webAppKeyboard = WebAppInfo(url="https://desks-duels.netlify.app/")
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webAppKeyboard)
        )
        
        await bot.send_message(
            chat_id=telegram_id,
            text=f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç <b>{challenger_name}</b>!\n"
                 f"–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –º–µ—Å—Ç–æ ‚Ññ{seat_id}!\n"
                 f"–¢–µ–ø–µ—Ä—å –æ–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–º—É —Å–æ–ø–µ—Ä–Ω–∏–∫—É üèÜ",
            reply_markup=keyboard,
            parse_mode='html'
        )
        logger.info('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}')


# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, –∫–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç
@sio.on('*')
def catch_all(event, data):
    logger.info(f'üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event}')
    logger.info(f'üì¶ –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {data}')

# –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@sio.event
def connect():
    logger.info('üü¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–æ–∫–µ—Ç-—Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    logger.info(f'üîó URL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {sio.connection_url}')
    # Re-emit join event for all users when reconnected
    try:
        response = requests.get(f"{BASE_URL}/users")
        if response.status_code == 200:
            users = response.json()
            for user in users:
                telegram_id = str(user.get('telegramId'))
                if telegram_id:
                    sio.emit('join', telegram_id)
                    logger.info(f'–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')

@sio.event
def disconnect():
    logger.info('üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–æ–∫–µ—Ç-—Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ')

@sio.event
def connect_error(error):
    logger.error(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ–∫–µ—Ç-—Å–µ—Ä–≤–µ—Ä—É: {error}')

# –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º WEBHOOK_URL
RENDER_EXTERNAL_HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    if RENDER_EXTERNAL_HOSTNAME.startswith("http://") or RENDER_EXTERNAL_HOSTNAME.startswith("https://"):
        RENDER_EXTERNAL_HOSTNAME = RENDER_EXTERNAL_HOSTNAME.split("://")[1]
    WEBHOOK_URL = f"https://{RENDER_EXTERNAL_HOSTNAME}{WEBHOOK_PATH}"
else:
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok URL –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    WEBHOOK_URL = os.getenv('WEBHOOK_URL', "https://6f06-95-26-82-58.ngrok-free.app/webhook")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ngrok URL

# ==========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–æ—Ç–∞ –∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# ==========================

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ==========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ==========================

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
# ==========================

scheduler = AsyncIOScheduler()

# ==========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI —Å Lifespan
# ==========================

app = FastAPI(lifespan=lambda app: lifespan(app))

# ==========================
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# ==========================
notifications_enabled = True  # –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# ==========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏
# ==========================

async def make_request(method, *args, **kwargs):
    try:
        logger.info(f"Received HTTP method: {method}")

        if isinstance(method, str):
            method = method.upper()
        else:
            raise ValueError("The 'method' argument should be a string representing an HTTP method.")
        
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(verify_ssl=False)) as session:
            async with session.request(method, *args, **kwargs) as response:
                print(response)
                if 'application/json' in response.headers.get('Content-Type', ''):
                    return await response.json()
                else:
                    logger.warning(f"Non-JSON response received: {response.headers.get('Content-Type')}")
                    return await response.text()
    except aiohttp.ClientError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –≤ make_request: {e}")
        raise
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ make_request: {e}")
        raise

async def get_all_users():
    try:
        response = await make_request("GET", f"{BASE_URL}/users")
        print(response)
        return response.json()
    except requests.RequestException as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

async def notify_user(telegram_id):
    if not notifications_enabled:
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return
    
    webAppKeyboard = WebAppInfo(url="https://desks-duels.netlify.app/")
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webAppKeyboard)
    )
    
    try:
        await bot.send_message(
            telegram_id,
            "–ì–æ—Ç–æ–≤—å—Å—è –∫ –±–∏—Ç–≤–µ, –æ–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!",
            reply_markup=keyboard
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

async def send_notifications():
    if not notifications_enabled:
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    try:
        users = await get_all_users()
        if not users:
            logger.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return
        
        tasks = []
        for user in users:
            telegram_id = user.get('telegramId')
            if telegram_id:
                tasks.append(notify_user(telegram_id))
            else:
                logger.warning(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ 'telegramId': {user}")
        
        if tasks:
            await asyncio.gather(*tasks)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_notifications: {e}")

def schedule_notifications():
    lesson_times = [
        ("07:35", send_notifications),
        ("09:25", send_notifications),
        ("10:15", send_notifications),
        ("11:15", send_notifications),
        ("12:15", send_notifications),
        ("13:05", send_notifications),
        ("13:55", send_notifications),
    ]

    for time_str, job in lesson_times:
        hour, minute = map(int, time_str.split(":"))
        scheduler.add_job(
            job,
            "cron",
            hour=hour,
            minute=minute,
            day_of_week="mon-fri",
            id=f"notification_{hour}_{minute}"
        )

# ==========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–æ–º–∞–Ω–¥ –ë–æ—Ç–∞
# ==========================

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    global CURRENT_USER_ID
    CURRENT_USER_ID = str(message.from_user.id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {CURRENT_USER_ID}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        response = requests.post(
            f"{BASE_URL}/auth/check",
            json={"telegramId": str(message.from_user.id)}
        )
        response.raise_for_status()
        
        # Create a loading animation
        loading_message = await bot.send_message(chat_id=message.from_user.id, text="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        loading_frames = [
            "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö°",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö üìä",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è üë§",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ üéÆ",
        ]
        
        # Animate the loading message
        for frame in loading_frames:
            await asyncio.sleep(0.7)  # Add delay between frames
            await loading_message.edit_text(frame)
        
        # Final success message
        await loading_message.edit_text("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ")
        await asyncio.sleep(1)  # Brief pause before continuing
        
        user = response.json()
        
        if user:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Telegram Web App –Ω–∞ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            webAppKeyboard = WebAppInfo(url="https://desks-duels.netlify.app/")
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webAppKeyboard)
            )
            await bot.send_message(
                chat_id=message.from_user.id, 
                text="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", 
                reply_markup=keyboard
            )
            return
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
    user_data = {
        "telegramId": str(message.from_user.id),
        "username": message.from_user.username,
        "firstName": message.from_user.first_name
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/auth/register",
            json=user_data
        )
        response.raise_for_status()

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Telegram Web App –Ω–∞ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        webAppKeyboard = WebAppInfo(url="https://desks-duels.netlify.app/")
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webAppKeyboard)
        )
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üéâ <b>Desks Duels</b> üéâ \n"
            "–≠—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –∏–≥—Ä–∞, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –∑–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ –≤ –∫–ª–∞—Å—Å–µ\n"
            "\nüëá <b>–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É</b> üëá"
        )
        await bot.send_message(chat_id=message.from_user.id, text=welcome_text, reply_markup=keyboard, parse_mode='html')
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
@dp.message_handler(commands=['notify'])
async def toggle_notifications(message: types.Message):
    try:
        user_id = str(message.from_user.id)
        
        # Toggle notifications state for this user
        notifications_state[user_id] = not notifications_state.get(user_id, True)
        
        # Create keyboard with current status
        status_keyboard = InlineKeyboardMarkup(row_width=1)
        status_text = "üîî –í–∫–ª—é—á–µ–Ω—ã" if notifications_state[user_id] else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
        status_keyboard.add(
            InlineKeyboardButton(
                text=f"–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {status_text}",
                callback_data="notification_status"
            )
        )
        
        # Send response message
        await message.reply(
            f"{'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!' if notifications_state[user_id] else 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!'}\n\n"
            f"{'–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥—É—ç–ª—è—Ö.' if notifications_state[user_id] else '–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥—É—ç–ª—è—Ö.'}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notify —á—Ç–æ–±—ã {'–æ—Ç–∫–ª—é—á–∏—Ç—å' if notifications_state[user_id] else '–≤–∫–ª—é—á–∏—Ç—å'} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            reply_markup=status_keyboard
        )
        
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {"–≤–∫–ª—é—á–∏–ª" if notifications_state[user_id] else "–æ—Ç–∫–ª—é—á–∏–ª"} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(commands=['restart'])
async def delete_user(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    data = {"telegramId": message.from_user.id}
    
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        response = await make_request(
            "DELETE",
            f"{BASE_URL}/auth/delete",
            json=data
        )

        print(response)
        
        await message.reply(
            '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!\n<b>–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ /start</b>',
            parse_mode='html'
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except requests.HTTPError as e:
        status_code = e.response.status_code
        response_text = e.response.text
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {status_code} - {response_text}")
        await message.reply(
            f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {status_code} - {response_text}',
            parse_mode='html'
        )
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.reply(
            f'–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.\n<b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}</b>',
            parse_mode='html'
        )

@dp.message_handler(commands=['socket_status'])
async def socket_status(message: types.Message):
    status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if sio.connected else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"
    await message.reply(
        f"–°—Ç–∞—Ç—É—Å —Å–æ–∫–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {status}\n"
        f"–¢–µ–∫—É—â–∏–π ID: {CURRENT_USER_ID}\n"
        f"URL: {sio.connection_url if sio.connected else '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}"
    )

# ==========================
# –ú–∞—Ä—à—Ä—É—Ç—ã FastAPI
# ==========================

@app.get("/health")
async def health_check():
    return JSONResponse(content={"status": "ok"}, status_code=200)

@app.get("/webhook/status")
async def webhook_status():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–µ–±—Ö—É–∫–µ
        webhook_info = await bot.get_webhook_info()
        
        return {
            "url": webhook_info.url,
            "is_set": bool(webhook_info.url),
            "pending_update_count": webhook_info.pending_update_count,
            "last_error_date": webhook_info.last_error_date,
            "last_error_message": webhook_info.last_error_message,
            "max_connections": webhook_info.max_connections
        }
    except Exception as e:
        logger.error(f"Error checking webhook status: {e}")
        return JSONResponse(
            status_code=500, 
            content={"error": "Failed to retrieve webhook status"}
        )

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    try:
        update_data = await request.json()
        update = types.Update(**update_data)
        
        Dispatcher.set_current(dp)
        Bot.set_current(bot)
        
        await dp.process_update(update)
        
        return JSONResponse(content={"status": "ok"}, status_code=200)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {e}")
        return JSONResponse(content={"status": "error", "message": str(e)}, status_code=400)

# ==========================
# Lifespan Event Handlers
# ==========================


@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    schedule_notifications()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBHOOK_URL:
        await bot.set_webhook(url=WEBHOOK_URL)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞
    scheduler.shutdown()
    await bot.session.close()

@dp.message_handler(content_types=['text'])
async def func(message: types.Message):
    if message.text not in ['/start', '/restart', '/notify']:
        await message.reply('–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.')

# ==========================
# –ó–∞–ø—É—Å–∫ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ==========================

if __name__ == '__main__':
    try:
        connect_to_socket()
        uvicorn.run("bot:app", host="0.0.0.0", port=PORT, log_level="info")
    except KeyboardInterrupt:
        pass